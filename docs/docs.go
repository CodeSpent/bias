// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/streams": {
            "get": {
                "description": "Get stream details by providing its ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get stream by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "StreamModel ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.StreamModel"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new stream with provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new stream",
                "parameters": [
                    {
                        "description": "StreamModel object",
                        "name": "stream",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.StreamModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.StreamModel"
                        }
                    }
                }
            }
        },
        "/streams/all": {
            "get": {
                "description": "Get details of all available streams",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all streams",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.StreamModel"
                            }
                        }
                    }
                }
            }
        },
        "/tags": {
            "get": {
                "description": "Get details of all available tags",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all tags",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TagModel"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new tag with provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new tag",
                "parameters": [
                    {
                        "description": "TagModel object",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TagModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.TagModel"
                        }
                    }
                }
            }
        },
        "/tags/{id}": {
            "get": {
                "description": "Get tag details by providing its ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get tag by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "TagModel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TagModel"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing tag with new data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a tag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "TagModel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "TagModel object",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TagModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TagModel"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a tag by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a tag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "TagModel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TagModel deleted",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.StreamModel": {
            "type": "object",
            "properties": {
                "gameId": {
                    "description": "GameID is the unique identifier of the game being streamed.",
                    "type": "string"
                },
                "gameName": {
                    "description": "GameName is the name of the game being streamed.",
                    "type": "string"
                },
                "id": {
                    "description": "gorm.Model includes fields: ID, CreatedAt, UpdatedAt, DeletedAt",
                    "type": "integer"
                },
                "language": {
                    "description": "Language is the language of the stream content.",
                    "type": "string"
                },
                "startedAt": {
                    "description": "StartedAt is the timestamp when the stream started.",
                    "type": "string"
                },
                "streamId": {
                    "description": "StreamID is the unique identifier of the stream.",
                    "type": "string"
                },
                "tags": {
                    "description": "Tags is a list of tags associated with the stream.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TagModel"
                    }
                },
                "title": {
                    "description": "Title is the title of the stream.",
                    "type": "string"
                },
                "userId": {
                    "description": "UserID is the identifier of the user associated with the stream.",
                    "type": "string"
                },
                "userName": {
                    "description": "UserName is the name of the user associated with the stream.",
                    "type": "string"
                },
                "viewerCount": {
                    "description": "ViewerCount represents the number of viewers of the stream.",
                    "type": "integer"
                }
            }
        },
        "models.TagModel": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/models.TagType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.TagType": {
            "type": "string",
            "enum": [
                "Language",
                "Framework",
                "Concept",
                "Platform"
            ],
            "x-enum-varnames": [
                "TagTypeLanguage",
                "TagTypeFramework",
                "TagTypeConcept",
                "TagTypePlatform"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
